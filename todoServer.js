/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const { v4: uuidv4 } = require("uuid");

const app = express();

app.use(express.json());
//In memory database
let todos = [
  {
    title: "Go to Gym",
    description: "Go to gym from 9 pm to 10pm",
    id: uuidv4(),
    completed: false,
  },
];
// Get All Todos
app.get("/todos", (req, res) => {
  const allTodos = todos.map((todo) => todo);
  // console.log(allTodos);

  res.status(200).json(allTodos);
});

//Add a new Todo
app.post("/todos", (req, res) => {
  const todo = req.body.todo;
  todo.id = uuidv4();
  todo.completed = false;
  todos.push(todo);

  res.status(201).json({ message: "Todo added", todo });
});

// Get a todo by id
app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  // console.log(id);
  const filterTodo = todos.filter((todo) => {
    return todo.id === id;
  });
  if (filterTodo.length > 0) {
    res.send(filterTodo);
  } else {
    res.status(404).send("Todo not found");
  }
});

// Update a todo
app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const { title, completed } = req.body.todo;
  const todoIndex = todos.findIndex((todo) => todo.id === id);

  if (todoIndex !== -1) {
    todos[todoIndex] = { ...todos[todoIndex], title, completed };
    res.status(200).json({ message: "Todo updated", todo: todos[todoIndex] });
  } else {
    res.status(404).json({ error: "Todo not found" });
  }
});

// delete a todo
app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  const newTodos = todos.filter((todo) => {
    return todo.id !== id;
  });
  todos = newTodos;
  console.log(newTodos);
  res.status(200).json({ message: "Todo deleted" });
});

// handling other routes
app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

// listening
app.listen(3000, () => console.log("Server is running"));
module.exports = app;
